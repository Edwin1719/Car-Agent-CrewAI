"""
Herramientas de Investigaci√≥n para CrewAI

Estas herramientas permiten a Mar√≠a realizar investigaci√≥n web y an√°lisis t√©cnico
de veh√≠culos para proporcionar informaci√≥n detallada a Carlos y al cliente.
"""

from crewai.tools import BaseTool
from typing import Type, Optional
from pydantic import BaseModel, Field
import os
import requests
from datetime import datetime


class VehicleResearchInput(BaseModel):
    """Input schema para investigaci√≥n de veh√≠culos"""
    vehicle_info: str = Field(..., description="Informaci√≥n del veh√≠culo a investigar (marca, modelo, a√±o)")
    research_focus: str = Field(default="general", description="Enfoque de la investigaci√≥n: 'safety', 'reviews', 'specs', 'comparison', 'general'")


class MarketResearchInput(BaseModel):
    """Input schema para investigaci√≥n de mercado"""
    query: str = Field(..., description="Consulta de investigaci√≥n de mercado")


class VehicleResearchTool(BaseTool):
    """
    Herramienta principal de investigaci√≥n de veh√≠culos para Mar√≠a
    
    Proporciona informaci√≥n t√©cnica, rese√±as, calificaciones de seguridad
    y comparativas de veh√≠culos espec√≠ficos.
    """
    
    name: str = "Investigaci√≥n de Veh√≠culos"
    description: str = (
        "Investiga informaci√≥n t√©cnica detallada sobre veh√≠culos espec√≠ficos. "
        "Incluye especificaciones, calificaciones de seguridad, rese√±as de expertos, "
        "y comparativas de mercado. Enfoque puede ser: 'safety', 'reviews', 'specs', 'comparison', 'general'"
    )
    args_schema: Type[BaseModel] = VehicleResearchInput
    
    def _run(self, vehicle_info: str, research_focus: str = "general") -> str:
        """Ejecuta investigaci√≥n detallada del veh√≠culo"""
        try:
            print(f"üîç Mar√≠a investigando: {vehicle_info} (enfoque: {research_focus})")
            
            # Intentar investigaci√≥n web si est√° disponible SerpAPI
            web_results = self._web_research(vehicle_info, research_focus)
            
            if web_results:
                # Combinar con conocimiento interno
                internal_analysis = self._internal_analysis(vehicle_info, research_focus)
                
                response = f"""üìä **AN√ÅLISIS DE MAR√çA - INVESTIGACI√ìN DE VEH√çCULOS**

**Veh√≠culo Investigado:** {vehicle_info}
**Enfoque:** {research_focus.title()}

{web_results}

{internal_analysis}

**Conclusi√≥n de Mar√≠a:**
{self._generate_conclusion(vehicle_info, research_focus)}

---
*Investigaci√≥n realizada el {datetime.now().strftime('%d/%m/%Y %H:%M')} por Mar√≠a, Especialista en Investigaci√≥n Automotriz*
"""
            else:
                # Solo an√°lisis interno si no hay web research
                response = self._internal_analysis_detailed(vehicle_info, research_focus)
            
            print(f"‚úÖ Mar√≠a complet√≥ investigaci√≥n de {vehicle_info}")
            return response
            
        except Exception as e:
            error_msg = f"‚ùå Error en investigaci√≥n de veh√≠culo: {str(e)}"
            print(error_msg)
            return error_msg
    
    def _web_research(self, vehicle_info: str, research_focus: str) -> Optional[str]:
        """Realiza investigaci√≥n web usando SerpAPI si est√° disponible"""
        serpapi_key = os.getenv('SERPAPI_API_KEY')
        
        if not serpapi_key:
            print("‚ö†Ô∏è SerpAPI no disponible, usando conocimiento interno")
            return None
        
        try:
            # Construir query seg√∫n el enfoque
            if research_focus == "safety":
                query = f"{vehicle_info} safety rating NHTSA IIHS crash test"
            elif research_focus == "reviews":
                query = f"{vehicle_info} expert reviews consumer reports"
            elif research_focus == "specs":
                query = f"{vehicle_info} specifications engine transmission features"
            elif research_focus == "comparison":
                query = f"{vehicle_info} vs competitors comparison"
            else:
                query = f"{vehicle_info} review specifications safety"
            
            # Realizar b√∫squeda
            url = "https://serpapi.com/search"
            params = {
                "engine": "google",
                "q": query,
                "api_key": serpapi_key,
                "num": 5
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                return self._process_web_results(data, research_focus)
            else:
                print(f"‚ö†Ô∏è Error en SerpAPI: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error en investigaci√≥n web: {e}")
            return None
    
    def _process_web_results(self, data: dict, research_focus: str) -> str:
        """Procesa los resultados de la b√∫squeda web"""
        organic_results = data.get('organic_results', [])
        
        if not organic_results:
            return "**Investigaci√≥n Web:** No se encontraron resultados espec√≠ficos."
        
        processed_info = ["**üì° Investigaci√≥n Web Actualizada:**"]
        
        for i, result in enumerate(organic_results[:3], 1):
            title = result.get('title', 'Sin t√≠tulo')
            snippet = result.get('snippet', 'Sin descripci√≥n disponible')
            
            processed_info.append(f"""
**Fuente {i}: {title}**
{snippet}
""")
        
        return "\n".join(processed_info)
    
    def _internal_analysis(self, vehicle_info: str, research_focus: str) -> str:
        """An√°lisis usando conocimiento interno de Mar√≠a"""
        
        if research_focus == "safety":
            return self._safety_analysis(vehicle_info)
        elif research_focus == "specs":
            return self._specs_analysis(vehicle_info)
        elif research_focus == "reviews":
            return self._reviews_analysis(vehicle_info)
        else:
            return self._general_analysis(vehicle_info)
    
    def _internal_analysis_detailed(self, vehicle_info: str, research_focus: str) -> str:
        """An√°lisis interno detallado cuando no hay web research"""
        
        response = f"""üìä **AN√ÅLISIS DE MAR√çA - CONOCIMIENTO INTERNO**

**Veh√≠culo Analizado:** {vehicle_info}
**Enfoque:** {research_focus.title()}

{self._internal_analysis(vehicle_info, research_focus)}

**Recomendaciones T√©cnicas:**
{self._technical_recommendations(vehicle_info, research_focus)}

**Nota:** *An√°lisis basado en conocimiento interno. Para informaci√≥n m√°s actualizada, se recomienda configurar SerpAPI.*

---
*An√°lisis t√©cnico por Mar√≠a, Especialista en Investigaci√≥n Automotriz*
"""
        return response
    
    def _safety_analysis(self, vehicle_info: str) -> str:
        """An√°lisis de seguridad"""
        return f"""
**üõ°Ô∏è An√°lisis de Seguridad:**

**Est√°ndares de Seguridad T√≠picos:**
‚Ä¢ Calificaciones NHTSA: Buscar 4-5 estrellas
‚Ä¢ Premios IIHS Top Safety Pick cuando disponible
‚Ä¢ Sistemas de asistencia al conductor est√°ndar

**Caracter√≠sticas de Seguridad Modernas Esperadas:**
‚Ä¢ Frenado autom√°tico de emergencia
‚Ä¢ Advertencia de cambio de carril
‚Ä¢ Monitoreo de punto ciego
‚Ä¢ Control de estabilidad avanzado

**Recomendaci√≥n:** Verificar calificaciones espec√≠ficas del a√±o {vehicle_info.split()[-1] if vehicle_info.split() else 'del modelo'} para confirmaci√≥n exacta.
"""
    
    def _specs_analysis(self, vehicle_info: str) -> str:
        """An√°lisis de especificaciones"""
        return f"""
**‚öôÔ∏è An√°lisis de Especificaciones:**

**Aspectos T√©cnicos T√≠picos a Considerar:**
‚Ä¢ Motor y rendimiento de combustible
‚Ä¢ Capacidad de carga y espacio interior
‚Ä¢ Tecnolog√≠a y conectividad
‚Ä¢ Sistemas de transmisi√≥n disponibles

**Caracter√≠sticas Modernas Esperadas:**
‚Ä¢ Pantalla t√°ctil con Apple CarPlay/Android Auto
‚Ä¢ C√°mara de reversa
‚Ä¢ Puertos USB m√∫ltiples
‚Ä¢ Sistemas de climatizaci√≥n autom√°tica

**Nota T√©cnica:** Las especificaciones exactas var√≠an por trim level y a√±o del modelo.
"""
    
    def _reviews_analysis(self, vehicle_info: str) -> str:
        """An√°lisis de rese√±as"""
        return f"""
**üìù An√°lisis de Rese√±as T√≠picas:**

**Aspectos Com√∫nmente Evaluados:**
‚Ä¢ Confiabilidad y durabilidad a largo plazo
‚Ä¢ Costo de mantenimiento
‚Ä¢ Experiencia de conducci√≥n
‚Ä¢ Valor de reventa

**Fuentes Recomendadas para Verificaci√≥n:**
‚Ä¢ Consumer Reports para confiabilidad
‚Ä¢ Kelley Blue Book para valor de mercado
‚Ä¢ Edmunds para rese√±as de expertos
‚Ä¢ Opiniones de propietarios en foros especializados

**Consejo:** Considerar rese√±as de m√∫ltiples a√±os para tendencias de confiabilidad.
"""
    
    def _general_analysis(self, vehicle_info: str) -> str:
        """An√°lisis general"""
        return f"""
**üîç An√°lisis General:**

**Puntos de Investigaci√≥n Clave:**
‚Ä¢ Posici√≥n competitiva en su segmento
‚Ä¢ Historial de confiabilidad de la marca
‚Ä¢ Disponibilidad de piezas y servicio
‚Ä¢ Tendencias de depreciaci√≥n

**Factores de Decisi√≥n Importantes:**
‚Ä¢ Costo total de propiedad
‚Ä¢ Adecuaci√≥n para necesidades espec√≠ficas del cliente
‚Ä¢ Disponibilidad de financiamiento
‚Ä¢ Garant√≠as y servicios incluidos
"""
    
    def _technical_recommendations(self, vehicle_info: str, research_focus: str) -> str:
        """Genera recomendaciones t√©cnicas espec√≠ficas"""
        recommendations = []
        
        if "SUV" in vehicle_info.upper():
            recommendations.append("Verificar capacidad de remolque si es relevante")
            recommendations.append("Evaluar sistema de tracci√≥n (AWD vs FWD)")
        
        if "sedan" in vehicle_info.lower():
            recommendations.append("Considerar eficiencia de combustible en ciudad")
            recommendations.append("Evaluar espacio de maletero")
        
        if research_focus == "safety":
            recommendations.append("Solicitar informe detallado de crash tests")
            recommendations.append("Verificar recalls de seguridad vigentes")
        
        return "‚Ä¢ " + "\n‚Ä¢ ".join(recommendations) if recommendations else "Evaluaci√≥n caso por caso seg√∫n necesidades espec√≠ficas."
    
    def _generate_conclusion(self, vehicle_info: str, research_focus: str) -> str:
        """Genera conclusi√≥n personalizada"""
        conclusions = {
            "safety": f"El {vehicle_info} muestra caracter√≠sticas de seguridad acordes a est√°ndares modernos. Recomiendo verificar calificaciones espec√≠ficas del a√±o.",
            "specs": f"Las especificaciones del {vehicle_info} son competitivas en su segmento. Considerar trim level seg√∫n necesidades espec√≠ficas.",
            "reviews": f"Las rese√±as del {vehicle_info} generalmente reflejan buena relaci√≥n calidad-precio. Evaluar seg√∫n prioridades del cliente.",
            "general": f"El {vehicle_info} representa una opci√≥n s√≥lida en su categor√≠a. Recomiendo considerarlo dentro del contexto de necesidades espec√≠ficas del cliente."
        }
        
        return conclusions.get(research_focus, f"El {vehicle_info} requiere evaluaci√≥n espec√≠fica seg√∫n criterios del cliente.")


class MarketComparisonTool(BaseTool):
    """
    Herramienta para comparaciones de mercado
    
    Permite a Mar√≠a comparar veh√≠culos similares y proporcionar
    an√°lisis competitivo.
    """
    
    name: str = "Comparaci√≥n de Mercado"
    description: str = (
        "Realiza comparaciones entre veh√≠culos similares en el mercado. "
        "√ötil para mostrar al cliente c√≥mo se posiciona un veh√≠culo frente a la competencia."
    )
    args_schema: Type[BaseModel] = MarketResearchInput
    
    def _run(self, query: str) -> str:
        """Ejecuta comparaci√≥n de mercado"""
        try:
            print(f"üìä Mar√≠a comparando mercado: {query}")
            
            response = f"""üìä **COMPARACI√ìN DE MERCADO - MAR√çA**

**An√°lisis Solicitado:** {query}

**üèÜ Factores de Comparaci√≥n Clave:**

**Precio y Valor:**
‚Ä¢ Posicionamiento en el segmento
‚Ä¢ Relaci√≥n precio-equipamiento
‚Ä¢ Costo total de propiedad proyectado

**Rendimiento y Eficiencia:**
‚Ä¢ Consumo de combustible comparativo
‚Ä¢ Potencia y torque en la categor√≠a
‚Ä¢ Capacidades de carga/remolque

**Seguridad y Confiabilidad:**
‚Ä¢ Calificaciones de seguridad relativas
‚Ä¢ Historial de recalls y problemas
‚Ä¢ Garant√≠as ofrecidas

**Tecnolog√≠a y Comodidad:**
‚Ä¢ Caracter√≠sticas est√°ndar vs opcionales
‚Ä¢ Sistemas de infoentretenimiento
‚Ä¢ Espacios interiores y comodidades

**Recomendaci√≥n de Mar√≠a:**
Para una comparaci√≥n precisa, considerar veh√≠culos en rango de precio similar (+/- 15%) y categor√≠a equivalente. Evaluar seg√∫n prioridades espec√≠ficas del cliente.

**Pr√≥ximo Paso Sugerido:**
Definir 2-3 criterios m√°s importantes para el cliente y enfocar comparaci√≥n en esos aspectos espec√≠ficos.
"""
            
            print(f"‚úÖ Mar√≠a complet√≥ comparaci√≥n de mercado")
            return response
            
        except Exception as e:
            error_msg = f"‚ùå Error en comparaci√≥n de mercado: {str(e)}"
            print(error_msg)
            return error_msg


# Exportar herramientas
__all__ = [
    'VehicleResearchTool',
    'MarketComparisonTool'
]