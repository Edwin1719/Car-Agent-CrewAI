"""
Herramientas de Delegaci√≥n para CrewAI - Patr√≥n Original

Edwin (Manager) y Mar√≠a (Research) funcionan como herramientas especializadas
que Carlos invoca, replicando la arquitectura del sistema original.
"""

from crewai.tools import BaseTool
from typing import Type, Any, List, Dict
from pydantic import BaseModel, Field
import sys
import os
import logging

# Agregar el directorio src al path para importar nuestros m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from inventory_manager import inventory_manager, Vehicle

# Configurar logging
logger = logging.getLogger(__name__)


class InventorySearchInput(BaseModel):
    """Input schema para b√∫squeda de inventario"""
    query: str = Field(..., description="Consulta de b√∫squeda en lenguaje natural (ej: 'SUV seguro para familia bajo 35000')")
    max_results: int = Field(default=8, description="N√∫mero m√°ximo de resultados a retornar")


class VehicleReservationInput(BaseModel):
    """Input schema para reserva de veh√≠culos"""
    vin: str = Field(..., description="VIN del veh√≠culo a reservar")


class VehicleDetailInput(BaseModel):
    """Input schema para obtener detalles de veh√≠culo"""
    vin: str = Field(..., description="VIN del veh√≠culo del cual obtener detalles")


class InventorySearchTool(BaseTool):
    """
    Herramienta para buscar veh√≠culos en el inventario
    
    Esta herramienta es la principal que Edwin usa para buscar veh√≠culos
    seg√∫n las necesidades del cliente expresadas por Carlos.
    """
    
    name: str = "B√∫squeda de Inventario"
    description: str = (
        "Busca veh√≠culos en el inventario usando lenguaje natural. "
        "Puedes buscar por tipo de veh√≠culo, presupuesto, color, caracter√≠sticas familiares, etc. "
        "Ejemplos: 'SUV seguro para familia bajo 35000', 'sedan rojo deportivo', 'veh√≠culo econ√≥mico h√≠brido'"
    )
    args_schema: Type[BaseModel] = InventorySearchInput
    
    def _run(self, query: str, max_results: int = 8) -> str:
        """Ejecuta la b√∫squeda de inventario"""
        try:
            print(f"üîç Edwin busca: '{query}' (m√°x {max_results} resultados)")
            
            # Realizar b√∫squeda inteligente
            vehicles = inventory_manager.intelligent_search(query, max_results)
            
            if not vehicles:
                return f"‚ùå No se encontraron veh√≠culos que coincidan con: '{query}'"
            
            # Formatear resultados para Edwin
            formatted_results = inventory_manager.format_vehicles_for_agent(vehicles, max_results)
            
            # Agregar estad√≠sticas del inventario
            stats = inventory_manager.get_inventory_stats()
            
            response = f"""üè¢ **RESPUESTA DE EDWIN - B√öSQUEDA DE INVENTARIO:**

{formatted_results}

**üìä Estad√≠sticas del Inventario:**
‚Ä¢ Total de veh√≠culos: {stats['total']}
‚Ä¢ Disponibles: {stats['available']}
‚Ä¢ Reservados: {stats['reserved']}

**üí° Recomendaci√≥n de Edwin:**
{self._generate_recommendation(vehicles, query)}
"""
            
            print(f"‚úÖ Edwin encontr√≥ {len(vehicles)} veh√≠culos")
            return response
            
        except Exception as e:
            error_msg = f"‚ùå Error en b√∫squeda de inventario: {str(e)}"
            print(error_msg)
            return error_msg
    
    def _generate_recommendation(self, vehicles: List[Vehicle], query: str) -> str:
        """Genera recomendaci√≥n de Edwin basada en los resultados"""
        if not vehicles:
            return "No hay recomendaciones disponibles."
        
        top_vehicle = vehicles[0]  # El de mayor relevancia
        
        recommendations = []
        
        # Recomendaci√≥n por precio
        if top_vehicle.price < 25000:
            recommendations.append("Excelente opci√≥n econ√≥mica")
        elif top_vehicle.price > 50000:
            recommendations.append("Veh√≠culo premium con excelentes caracter√≠sticas")
        
        # Recomendaci√≥n por a√±o
        from datetime import datetime
        current_year = datetime.now().year
        if top_vehicle.year >= current_year - 1:
            recommendations.append("Modelo muy reciente")
        
        # Recomendaci√≥n por tipo
        if top_vehicle.body_style.upper() == 'SUV':
            recommendations.append("Ideal para familias por espacio y seguridad")
        
        # Estrategia de venta
        if len(vehicles) > 3:
            recommendations.append(f"Priorizar {top_vehicle.make} {top_vehicle.model} por mejor relaci√≥n calidad-precio")
        
        return ". ".join(recommendations) if recommendations else "Veh√≠culo s√≥lido seg√∫n criterios solicitados."


class VehicleReservationTool(BaseTool):
    """
    Herramienta para reservar veh√≠culos
    
    Esta herramienta es usada exclusivamente por Carlos cuando el cliente
    confirma la compra de un veh√≠culo espec√≠fico.
    """
    
    name: str = "Reservar Veh√≠culo"
    description: str = (
        "Reserva un veh√≠culo espec√≠fico usando su VIN. "
        "SOLO usar cuando el cliente haya confirmado expl√≠citamente que quiere comprar el veh√≠culo. "
        "Requiere el VIN exacto del veh√≠culo."
    )
    args_schema: Type[BaseModel] = VehicleReservationInput
    
    def _run(self, vin: str) -> str:
        """Ejecuta la reserva del veh√≠culo"""
        try:
            print(f"üîí Intentando reservar veh√≠culo VIN: {vin}")
            
            # Obtener detalles del veh√≠culo primero
            vehicle = inventory_manager.get_vehicle_by_vin(vin)
            
            if not vehicle:
                return f"‚ùå Error: No se encontr√≥ veh√≠culo con VIN {vin}. Verificar VIN con Edwin."
            
            if vehicle.status != 'Available':
                return f"‚ùå Error: Veh√≠culo {vehicle.make} {vehicle.model} (VIN: {vin}) no est√° disponible para reserva."
            
            # Intentar reservar
            success = inventory_manager.reserve_vehicle(vin)
            
            if success:
                response = f"""‚úÖ **VEH√çCULO RESERVADO EXITOSAMENTE**

**Detalles de la Reserva:**
‚Ä¢ **Veh√≠culo:** {vehicle.year} {vehicle.make} {vehicle.model}
‚Ä¢ **VIN:** {vin}
‚Ä¢ **Precio:** ${vehicle.price:,.0f}
‚Ä¢ **Color:** {vehicle.color}
‚Ä¢ **Estado:** RESERVADO

**Pr√≥ximos Pasos:**
‚Ä¢ El cliente debe proceder con el papeleo
‚Ä¢ Coordinaci√≥n de entrega pendiente
‚Ä¢ Reserva v√°lida por 48 horas

¬°Felicitaciones por cerrar la venta! üéâ"""
                
                print(f"‚úÖ Veh√≠culo {vin} reservado exitosamente")
                return response
            else:
                return f"‚ùå Error t√©cnico al reservar veh√≠culo {vin}. Contactar con Edwin para verificar disponibilidad."
                
        except Exception as e:
            error_msg = f"‚ùå Error en reserva de veh√≠culo {vin}: {str(e)}"
            print(error_msg)
            return error_msg


class VehicleDetailsTool(BaseTool):
    """
    Herramienta para obtener detalles espec√≠ficos de un veh√≠culo
    
    √ötil cuando Carlos necesita informaci√≥n detallada de un veh√≠culo espec√≠fico
    para responder preguntas del cliente.
    """
    
    name: str = "Detalles de Veh√≠culo"
    description: str = (
        "Obtiene informaci√≥n detallada de un veh√≠culo espec√≠fico usando su VIN. "
        "√ötil para responder preguntas espec√≠ficas del cliente sobre un veh√≠culo."
    )
    args_schema: Type[BaseModel] = VehicleDetailInput
    
    def _run(self, vin: str) -> str:
        """Obtiene detalles completos del veh√≠culo"""
        try:
            print(f"üìã Obteniendo detalles del veh√≠culo VIN: {vin}")
            
            vehicle = inventory_manager.get_vehicle_by_vin(vin)
            
            if not vehicle:
                return f"‚ùå No se encontr√≥ veh√≠culo con VIN {vin}"
            
            response = f"""üìã **DETALLES COMPLETOS DEL VEH√çCULO**

**Informaci√≥n B√°sica:**
‚Ä¢ **Marca y Modelo:** {vehicle.make} {vehicle.model}
‚Ä¢ **A√±o:** {vehicle.year}
‚Ä¢ **VIN:** {vehicle.vin}
‚Ä¢ **Precio:** ${vehicle.price:,.0f}
‚Ä¢ **Estado:** {vehicle.status}

**Especificaciones:**
‚Ä¢ **Kilometraje:** {vehicle.mileage:,} km
‚Ä¢ **Color:** {vehicle.color}
‚Ä¢ **Tipo de Carrocer√≠a:** {vehicle.body_style}
‚Ä¢ **Combustible:** {vehicle.fuel_type}
‚Ä¢ **Transmisi√≥n:** {vehicle.transmission}
"""
            
            # Agregar calificaci√≥n de seguridad si est√° disponible
            if vehicle.safety_rating:
                response += f"‚Ä¢ **Calificaci√≥n de Seguridad:** {vehicle.safety_rating}\n"
            
            # Agregar caracter√≠sticas si est√°n disponibles
            if vehicle.features:
                response += f"\n**Caracter√≠sticas Adicionales:**\n{vehicle.features}\n"
            
            print(f"‚úÖ Detalles obtenidos para {vehicle.make} {vehicle.model}")
            return response
            
        except Exception as e:
            error_msg = f"‚ùå Error obteniendo detalles del veh√≠culo {vin}: {str(e)}"
            print(error_msg)
            return error_msg


class InventoryStatsTool(BaseTool):
    """
    Herramienta para obtener estad√≠sticas generales del inventario
    
    √ötil para Edwin cuando necesita dar informaci√≥n general sobre disponibilidad.
    """
    
    name: str = "Estad√≠sticas de Inventario"
    description: str = (
        "Obtiene estad√≠sticas generales del inventario: total de veh√≠culos, "
        "disponibles, reservados, y resumen por categor√≠as."
    )
    
    def _run(self, **kwargs) -> str:
        """Obtiene estad√≠sticas del inventario"""
        try:
            print("üìä Generando estad√≠sticas del inventario")
            
            stats = inventory_manager.get_inventory_stats()
            
            # Obtener informaci√≥n adicional
            df = inventory_manager.inventory_df
            
            if df.empty:
                return "‚ùå Inventario vac√≠o o no disponible"
            
            # Estad√≠sticas por marca
            top_makes = df['make'].value_counts().head(5)
            
            # Rango de precios
            min_price = df['price'].min()
            max_price = df['price'].max()
            avg_price = df['price'].mean()
            
            response = f"""üìä **ESTAD√çSTICAS DEL INVENTARIO**

**Resumen General:**
‚Ä¢ **Total de veh√≠culos:** {stats['total']}
‚Ä¢ **Disponibles:** {stats['available']}
‚Ä¢ **Reservados:** {stats['reserved']}

**Informaci√≥n de Precios:**
‚Ä¢ **Rango:** ${min_price:,.0f} - ${max_price:,.0f}
‚Ä¢ **Precio promedio:** ${avg_price:,.0f}

**Top Marcas Disponibles:**
"""
            
            for make, count in top_makes.items():
                response += f"‚Ä¢ {make}: {count} veh√≠culos\n"
            
            print("‚úÖ Estad√≠sticas generadas exitosamente")
            return response
            
        except Exception as e:
            error_msg = f"‚ùå Error generando estad√≠sticas: {str(e)}"
            print(error_msg)
            return error_msg


# Exportar todas las herramientas para f√°cil importaci√≥n
__all__ = [
    'InventorySearchTool',
    'VehicleReservationTool', 
    'VehicleDetailsTool',
    'InventoryStatsTool'
]