"""
Herramientas de Delegaci√≥n CrewAI - Arquitectura Original

Implementa el patr√≥n del sistema original donde Edwin (Manager) y Mar√≠a (Research)
funcionan como herramientas especializadas que Carlos invoca.
"""

from crewai.tools import BaseTool
from typing import Type, Any, List, Dict
from pydantic import BaseModel, Field
import sys
import os
import logging
import re
import requests
from datetime import datetime

# Agregar el directorio src al path
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from inventory_manager import inventory_manager, Vehicle

# Configurar logging
logger = logging.getLogger(__name__)


# ========================================
# HERRAMIENTA PRINCIPAL: ConsultManager (Edwin)
# ========================================

class ConsultManagerInput(BaseModel):
    """Input para consultar con Edwin (Manager)"""
    request: str = Field(description="Consulta espec√≠fica para Edwin sobre inventario, precios, disponibilidad, VINs, etc.")


class ConsultManagerTool(BaseTool):
    """
    Herramienta principal para consultar con Edwin (Manager)
    
    Edwin maneja TODO lo relacionado con inventario, precios, disponibilidad,
    VINs y directivas de negocio. Replica el patr√≥n del sistema original.
    """
    name: str = "ConsultManager"
    description: str = """Consulta con Edwin (Manager) para TODO lo relacionado con:
    - B√∫squeda de inventario y disponibilidad
    - Detalles espec√≠ficos de veh√≠culos (VINs, caracter√≠sticas)
    - Precios, descuentos y autorizaci√≥n de ofertas
    - Directivas de venta y prioridades de negocio
    
    Ejemplos: 'Busca SUV familiares bajo 40000', 'VIN del Toyota Camry 2023', 'autoriza descuento 5% BMW X3'"""
    args_schema: Type[BaseModel] = ConsultManagerInput
    
    def _run(self, request: str) -> str:
        """Edwin procesa la consulta del manager"""
        try:
            logger.info(f"üè¢ Edwin recibe consulta: {request}")
            
            # Analizar tipo de consulta
            request_lower = request.lower()
            
            # 1. B√∫squeda de inventario (m√°s com√∫n)
            if any(keyword in request_lower for keyword in ['busca', 'buscar', 'encuentra', 'mostrar', 'opciones', 'veh√≠culos', 'autos']):
                return self._handle_inventory_search(request)
            
            # 2. Solicitud de VIN espec√≠fico
            elif 'vin' in request_lower:
                return self._handle_vin_request(request)
            
            # 3. Consultas de precio/descuento
            elif any(keyword in request_lower for keyword in ['precio', 'descuento', 'autoriza', 'oferta', 'costo']):
                return self._handle_pricing_request(request)
            
            # 4. Detalles espec√≠ficos de veh√≠culo
            elif any(keyword in request_lower for keyword in ['detalles', 'caracter√≠sticas', 'especificaciones', 'informaci√≥n']):
                return self._handle_vehicle_details(request)
            
            # 5. Consulta general
            else:
                return self._handle_general_consultation(request)
                
        except Exception as e:
            error_msg = f"‚ùå Edwin: Error procesando consulta: {str(e)}"
            logger.error(error_msg)
            return error_msg
    
    def _handle_inventory_search(self, request: str) -> str:
        """Maneja b√∫squedas de inventario"""
        try:
            vehicles = inventory_manager.intelligent_search(request, max_results=8)
            
            if not vehicles:
                return f"""üè¢ **EDWIN - B√öSQUEDA DE INVENTARIO:**

‚ùå No encontr√© veh√≠culos que coincidan con: "{request}"

**üí° Sugerencia de Edwin:**
Podemos ampliar los criterios de b√∫squeda o revisar opciones similares en nuestro inventario."""
            
            formatted_results = inventory_manager.format_vehicles_for_agent(vehicles, max_display=6)
            stats = inventory_manager.get_inventory_stats()
            
            return f"""üè¢ **EDWIN - B√öSQUEDA DE INVENTARIO:**

{formatted_results}

**üìä Estado del Inventario:**
‚Ä¢ Total: {stats['total']} | Disponibles: {stats['available']} | Reservados: {stats['reserved']}

**üí° An√°lisis de Edwin:**
{self._generate_edwin_recommendation(vehicles, request)}"""
            
        except Exception as e:
            return f"‚ùå Edwin: Error en b√∫squeda de inventario: {str(e)}"
    
    def _handle_vin_request(self, request: str) -> str:
        """Maneja solicitudes de VIN espec√≠ficas"""
        try:
            # Extraer modelo del request
            match = re.search(r'(del|de el)\s+([a-zA-Z0-9\s-]+)', request, re.IGNORECASE)
            if not match:
                return "‚ùå Edwin: No pude identificar el veh√≠culo para buscar el VIN. Por favor, s√© m√°s espec√≠fico."
            
            vehicle_query = match.group(2).strip()
            vehicles = inventory_manager.intelligent_search(vehicle_query, max_results=3)
            
            if not vehicles:
                return f"‚ùå Edwin: No encontr√© el veh√≠culo '{vehicle_query}' en nuestro inventario."
            
            vehicle = vehicles[0]  # Tomar el m√°s relevante
            return f"""üè¢ **EDWIN - INFORMACI√ìN VIN:**

**VIN solicitado:** {vehicle.vin}
**Veh√≠culo:** {vehicle.year} {vehicle.make} {vehicle.model}
**Precio:** ${vehicle.price:,}
**Estado:** {vehicle.status}

**üí° Edwin:** VIN verificado y disponible para proceder con la venta."""
            
        except Exception as e:
            return f"‚ùå Edwin: Error obteniendo VIN: {str(e)}"
    
    def _handle_pricing_request(self, request: str) -> str:
        """Maneja consultas de precios y descuentos"""
        return f"""üè¢ **EDWIN - AUTORIZACI√ìN DE PRECIOS:**

**Solicitud recibida:** {request}

**üí° Directrices de Edwin:**
‚Ä¢ Descuentos hasta 5% autorizados para compra inmediata
‚Ä¢ Financiamiento especial disponible a 0% por 36 meses
‚Ä¢ Trade-in valoraci√≥n premium para clientes serios
‚Ä¢ Garant√≠a extendida con descuento del 20%

**Recomendaci√≥n:** Procede con la negociaci√≥n dentro de estos par√°metros."""
    
    def _handle_vehicle_details(self, request: str) -> str:
        """Maneja solicitudes de detalles espec√≠ficos"""
        try:
            vehicles = inventory_manager.intelligent_search(request, max_results=1)
            if not vehicles:
                return f"‚ùå Edwin: No encontr√© el veh√≠culo espec√≠fico para dar detalles."
            
            vehicle = vehicles[0]
            return f"""üè¢ **EDWIN - DETALLES COMPLETOS:**

**{vehicle.year} {vehicle.make} {vehicle.model}**
‚Ä¢ VIN: {vehicle.vin}
‚Ä¢ Precio: ${vehicle.price:,}
‚Ä¢ Millaje: {vehicle.mileage:,} millas
‚Ä¢ Color: {vehicle.color}
‚Ä¢ Tipo: {vehicle.body_style}
‚Ä¢ Combustible: {vehicle.fuel_type}
‚Ä¢ Transmisi√≥n: {vehicle.transmission}
‚Ä¢ Estado: {vehicle.status}

**üí° Edwin:** Veh√≠culo verificado y listo para presentaci√≥n al cliente."""
            
        except Exception as e:
            return f"‚ùå Edwin: Error obteniendo detalles: {str(e)}"
    
    def _handle_general_consultation(self, request: str) -> str:
        """Maneja consultas generales"""
        return f"""üè¢ **EDWIN - CONSULTA GENERAL:**

**Consulta:** {request}

**üí° Respuesta de Edwin:**
Como manager de la concesionaria, estoy aqu√≠ para apoyarte en todo lo relacionado con inventario, precios y directivas de venta. 

Para consultas espec√≠ficas, puedes preguntarme sobre:
- B√∫squedas de inventario
- VINs espec√≠ficos
- Autorizaciones de descuentos
- Detalles t√©cnicos de veh√≠culos

¬øHay algo espec√≠fico en lo que pueda ayudarte?"""
    
    def _generate_edwin_recommendation(self, vehicles: List[Vehicle], query: str) -> str:
        """Genera recomendaci√≥n espec√≠fica de Edwin"""
        if not vehicles:
            return "No hay recomendaciones disponibles."
        
        top_vehicle = vehicles[0]
        recommendations = []
        
        # An√°lisis de precio
        if top_vehicle.price < 25000:
            recommendations.append("Excelente valor por dinero")
        elif top_vehicle.price > 50000:
            recommendations.append("Segmento premium con m√°xima calidad")
        
        # An√°lisis de antig√ºedad
        current_year = datetime.now().year
        if top_vehicle.year >= current_year - 1:
            recommendations.append("Modelo pr√°cticamente nuevo")
        elif top_vehicle.year >= current_year - 3:
            recommendations.append("Excelente relaci√≥n precio-valor")
        
        # An√°lisis de inventario
        if len(vehicles) >= 3:
            recommendations.append(f"Buena selecci√≥n disponible ({len(vehicles)} opciones)")
        
        recommendation = "Este veh√≠culo destaca por: " + ", ".join(recommendations) if recommendations else "Opci√≥n s√≥lida para considerar"
        return f"{recommendation}. Recomiendo presentar al cliente para evaluaci√≥n."


# ========================================
# HERRAMIENTA: ResearchVehicleInfo (Mar√≠a)
# ========================================

class ResearchVehicleInput(BaseModel):
    """Input para investigaci√≥n con Mar√≠a"""
    query: str = Field(description="Consulta de investigaci√≥n sobre veh√≠culos, marcas, comparativas, etc.")


class ResearchVehicleInfoTool(BaseTool):
    """
    Herramienta para consultar con Mar√≠a (Research Specialist + Technical Expert)

    Mar√≠a se especializa en investigaci√≥n externa de mercado, rese√±as,
    comparativas y an√°lisis t√©cnico NO disponible en nuestro inventario.
    """
    name: str = "ResearchVehicleInfo"
    description: str = """Consulta con Mar√≠a para investigaci√≥n EXTERNA del mercado:
    - Rese√±as y ratings de modelos espec√≠ficos
    - Comparativas con competidores
    - Datos de seguridad y confiabilidad
    - Tendencias del mercado automotriz
    - NUEVO: An√°lisis t√©cnico especializado (comparativas entre marcas)
    - NUEVO: Expertise en confiabilidad, consumo, rendimiento
    - NUEVO: Recomendaciones t√©cnicas profesionales

    NO usar para inventario propio (usa ConsultManager). Solo para informaci√≥n externa."""
    args_schema: Type[BaseModel] = ResearchVehicleInput
    
    def _run(self, query: str) -> str:
        """Mar√≠a procesa la consulta de investigaci√≥n"""
        try:
            logger.info(f"üî¨ Mar√≠a recibe consulta de investigaci√≥n: {query}")
            
            # Simular investigaci√≥n de Mar√≠a (en el original usaba SerpAPI)
            analysis = self._analyze_research_query(query)
            
            return f"""üî¨ **MAR√çA - INVESTIGACI√ìN DE MERCADO + AN√ÅLISIS T√âCNICO:**

**Consulta:** {query}

**üìä An√°lisis de Mar√≠a:**
{analysis}

**üí° Recomendaci√≥n de Mar√≠a:**
{self._generate_maria_recommendation(query)}

**üìÖ √öltima actualizaci√≥n:** {datetime.now().strftime('%Y-%m-%d %H:%M')}"""
            
        except Exception as e:
            error_msg = f"‚ùå Mar√≠a: Error en investigaci√≥n: {str(e)}"
            logger.error(error_msg)
            return error_msg
    
    def _analyze_research_query(self, query: str) -> str:
        """Analiza la consulta y proporciona investigaci√≥n simulada"""
        query_lower = query.lower()
        
        # An√°lisis de seguridad
        if any(keyword in query_lower for keyword in ['seguridad', 'safety', 'iihs', 'nhtsa']):
            return """**An√°lisis de Seguridad:**
‚Ä¢ Ratings IIHS y NHTSA disponibles para la mayor√≠a de modelos 2020+
‚Ä¢ Toyota y Honda lideran en confiabilidad general
‚Ä¢ Volvo y Mercedes destacan en tecnolog√≠a de seguridad activa
‚Ä¢ Los SUV modernos tienen mejor puntuaci√≥n que sedanes en rollover"""
        
        # An√°lisis de confiabilidad
        elif any(keyword in query_lower for keyword in ['confiabilidad', 'reliability', 'problemas', 'issues']):
            return """**An√°lisis de Confiabilidad:**
‚Ä¢ Toyota, Honda y Mazda encabezan rankings de confiabilidad
‚Ä¢ Marcas alemanas requieren m√°s mantenimiento pero mejor ingenier√≠a
‚Ä¢ Modelos h√≠bridos muestran excelente durabilidad a largo plazo
‚Ä¢ Evitar primeros a√±os de redesigns completos"""
        
        # Comparativas t√©cnicas especializadas (NUEVO)
        elif any(keyword in query_lower for keyword in ['comparar', 'vs', 'mejor', 't√©cnica', 'bmw', 'honda', 'toyota', 'audi', 'rendimiento', 'consumo']):
            return self._technical_comparison_analysis(query_lower)

        # Comparativas de mercado generales
        elif any(keyword in query_lower for keyword in ['competencia', 'mercado']):
            return """**Comparativa de Mercado:**
‚Ä¢ El segmento est√° muy competitivo con opciones s√≥lidas
‚Ä¢ Factores clave: precio, caracter√≠sticas, confiabilidad, reventa
‚Ä¢ Considerar tiempo en mercado y disponibilidad de partes
‚Ä¢ Verificar incentivos actuales del fabricante"""
        
        # An√°lisis general
        else:
            return """**Investigaci√≥n General:**
‚Ä¢ Mercado automotriz en transici√≥n hacia electrificaci√≥n
‚Ä¢ Valores de reventa favorables para marcas establecidas
‚Ä¢ Importancia creciente de tecnolog√≠a y conectividad
‚Ä¢ Tendencia hacia veh√≠culos m√°s grandes y utilitarios"""
    
    def _technical_comparison_analysis(self, query: str) -> str:
        """NUEVO: An√°lisis t√©cnico especializado de Mar√≠a"""
        # Detectar marcas en la consulta
        brands = []
        if 'bmw' in query: brands.append('BMW')
        if 'honda' in query: brands.append('Honda')
        if 'toyota' in query: brands.append('Toyota')
        if 'audi' in query: brands.append('Audi')
        if 'mercedes' in query: brands.append('Mercedes')
        if 'mazda' in query: brands.append('Mazda')

        if len(brands) >= 2:
            brand1, brand2 = brands[:2]
            return f"""**AN√ÅLISIS T√âCNICO ESPECIALIZADO - {brand1} vs {brand2}:**

**CONFIABILIDAD:**
‚Ä¢ {brand1}: {self._get_reliability_data(brand1)}
‚Ä¢ {brand2}: {self._get_reliability_data(brand2)}

**CONSUMO/EFICIENCIA:**
‚Ä¢ {brand1}: {self._get_fuel_data(brand1)}
‚Ä¢ {brand2}: {self._get_fuel_data(brand2)}

**RENDIMIENTO:**
‚Ä¢ {brand1}: {self._get_performance_data(brand1)}
‚Ä¢ {brand2}: {self._get_performance_data(brand2)}

**RECOMENDACI√ìN T√âCNICA:**
{self._get_technical_recommendation(brand1, brand2)}"""
        else:
            return """**An√°lisis T√©cnico General:**
‚Ä¢ Para comparativas espec√≠ficas, menciona las marcas que te interesan
‚Ä¢ Puedo analizar confiabilidad, consumo y rendimiento entre marcas
‚Ä¢ Especializada en BMW, Honda, Toyota, Audi, Mercedes, Mazda"""

    def _get_reliability_data(self, brand: str) -> str:
        reliability_data = {
            'Toyota': "9.2/10 - L√≠der mundial en confiabilidad, costos mantenimiento muy bajos",
            'Honda': "8.7/10 - Excelente historial, motores duraderos, CVT reciente problem√°tico",
            'BMW': "6.8/10 - Ingenier√≠a avanzada, costos mantenimiento altos, problemas electr√≥nicos",
            'Audi': "6.5/10 - Tecnolog√≠a quattro excelente, depreciaci√≥n r√°pida, reparaciones costosas",
            'Mercedes': "6.2/10 - Lujo premium, mantenimiento muy caro, complejidad electr√≥nica",
            'Mazda': "8.1/10 - Skyactiv confiable, buen balance precio-calidad, menos espacio"
        }
        return reliability_data.get(brand, "Datos no disponibles")

    def _get_fuel_data(self, brand: str) -> str:
        fuel_data = {
            'Toyota': "Excelente - L√≠der en h√≠bridos, Prius 4-5L/100km, tecnolog√≠a probada",
            'Honda': "Excelente - CR-V Hybrid 6L/100km, motores eficientes, buena aerodin√°mica",
            'BMW': "Buena - Serie 3 7-9L/100km, TwinPower Turbo eficiente, peso afecta consumo",
            'Audi': "Promedio-Baja - Quattro penaliza eficiencia, TDI excelentes, TSI variables",
            'Mercedes': "Promedio - Motores refinados, peso alto, h√≠bridos recientes prometedores",
            'Mazda': "Muy buena - Skyactiv-G 6-7L/100km, compresi√≥n alta, dise√±o aerodin√°mico"
        }
        return fuel_data.get(brand, "Datos no disponibles")

    def _get_performance_data(self, brand: str) -> str:
        performance_data = {
            'Toyota': "Conservador - Prioriza confiabilidad sobre performance, h√≠bridos adecuados",
            'Honda': "Equilibrado - VTEC cl√°sico, CR-V potente, manejo predecible y seguro",
            'BMW': "Superior - Ultimate driving machine, manejo deportivo, motores potentes",
            'Audi': "Excelente - Quattro tracci√≥n, turbos refinados, manejo deportivo-luxury",
            'Mercedes': "Lujo-Performance - AMG excepcional, confort prioritario, tecnolog√≠a avanzada",
            'Mazda': "Deportivo - Soul of motion, chasis din√°mico, motores responsivos"
        }
        return performance_data.get(brand, "Datos no disponibles")

    def _get_technical_recommendation(self, brand1: str, brand2: str) -> str:
        recommendations = {
            ('BMW', 'Honda'): "Honda para confiabilidad y econom√≠a familiar. BMW para experiencia de manejo premium.",
            ('Toyota', 'Audi'): "Toyota para m√°xima confiabilidad y econom√≠a operativa. Audi para tecnolog√≠a y prestige.",
            ('Mercedes', 'Mazda'): "Mazda para mejor relaci√≥n precio-valor. Mercedes para lujo absoluto.",
        }
        key = tuple(sorted([brand1, brand2]))
        return recommendations.get(key, f"Ambas marcas tienen fortalezas √∫nicas. {brand1} vs {brand2} depende de prioridades espec√≠ficas.")

    def _generate_maria_recommendation(self, query: str) -> str:
        """Genera recomendaci√≥n espec√≠fica de Mar√≠a (mantenida + mejorada)"""
        if any(keyword in query.lower() for keyword in ['comparar', 'vs', 'mejor', 't√©cnica']):
            return """Como especialista t√©cnica, recomiendo considerar no solo el precio sino tambi√©n costos de propiedad a largo plazo. La confiabilidad y eficiencia son factores clave para uso familiar."""
        else:
            return """Basado en datos de mercado actuales, recomiendo enfocarse en los beneficios √∫nicos de nuestros veh√≠culos versus la competencia. Puedo proporcionar an√°lisis m√°s espec√≠ficos seg√∫n las necesidades del cliente."""


# ========================================
# HERRAMIENTAS DE SOPORTE
# ========================================

class UpdateSalesStageInput(BaseModel):
    """Input para actualizar etapa de venta"""
    new_stage: str = Field(description="Nueva etapa: greeting, discovery, presentation, objection_handling, negotiation, closing, follow_up")
    notes: str = Field(default="", description="Notas sobre el cambio de etapa")


class UpdateSalesStageToolCorrected(BaseTool):
    """Actualiza la etapa de venta actual"""
    name: str = "UpdateSalesStage"
    description: str = "Actualiza la etapa actual del proceso de venta y registra progreso"
    args_schema: Type[BaseModel] = UpdateSalesStageInput
    
    def _run(self, new_stage: str, notes: str = "") -> str:
        """Actualiza la etapa de venta"""
        try:
            logger.info(f"üìà Actualizando etapa de venta a: {new_stage}")
            
            stage_descriptions = {
                "greeting": "Saludo inicial y construcci√≥n de rapport",
                "discovery": "Descubrimiento de necesidades del cliente", 
                "presentation": "Presentaci√≥n de veh√≠culos apropiados",
                "objection_handling": "Manejo de objeciones y preocupaciones",
                "negotiation": "Negociaci√≥n de t√©rminos y precio",
                "closing": "Cierre de la venta",
                "follow_up": "Seguimiento post-venta"
            }
            
            description = stage_descriptions.get(new_stage, "Etapa personalizada")
            
            return f"""üìà **ETAPA DE VENTA ACTUALIZADA**

**Nueva Etapa:** {new_stage.title()}
**Descripci√≥n:** {description}
**Notas:** {notes}

**‚úÖ Progreso registrado exitosamente**"""
            
        except Exception as e:
            return f"‚ùå Error actualizando etapa de venta: {str(e)}"